import streamlit as st
from pathlib import Path
import joblib
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neural_network import MLPClassifier
import pandas as pd
from datetime import datetime

# ==== PAGE CONFIG & CSS ====
st.set_page_config(page_title="B·ªô l·ªçc Email Spam ‚Äì MLP", page_icon="üß†", layout="centered")

CUSTOM_CSS = """
<style>
.small {font-size: 0.86rem; opacity: .8}
.badge {display:inline-block;padding:6px 10px;border-radius:999px;font-weight:600;}
.badge-ok {background:#e9fff1;color:#0a7d3b;border:1px solid #bff3d0;}
.badge-spam {background:#fff1f1;color:#b00020;border:1px solid #ffd2d2;}
.card {padding:18px 20px;border:1px solid #eee;border-radius:16px;
       background:#fff;box-shadow:0 2px 14px rgba(0,0,0,.04)}
.kq {font-size:1.25rem;font-weight:700;margin-bottom:0}
.mono {font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;}
.tips li{margin-bottom:.25rem}
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

st.title("üß† B·ªô l·ªçc Email Spam ‚Äì MLP (n∆°-ron nh·∫π)")
st.caption("TF-IDF (char 3‚Äì5 gram) + MLPClassifier ‚Ä¢ T·ªëi ∆∞u cho ti·∫øng Vi·ªát ‚Ä¢ UI ƒë·∫πp & nhanh")

# ==== LOAD MODEL (c√≥ Fallback) ====
@st.cache_resource(show_spinner=False)
def load_or_build_model():
    p = Path("model.pkl")
    if p.exists():
        try:
            model = joblib.load(p)
            return model, "model.pkl (ƒë√£ hu·∫•n luy·ªán)"
        except Exception as e:
            st.warning(f"Kh√¥ng load ƒë∆∞·ª£c model.pkl ({e}). S·∫Ω d√πng model t·∫°m.")

    # Fallback mini model (ƒë·ªß ch·∫°y demo)
    texts = [
        "Nh·∫≠n qu√† t·∫∑ng kh·ªßng, b·∫•m link ƒë·ªÉ nh·∫≠n th∆∞·ªüng ngay",
        "Ch√∫c m·ª´ng tr√∫ng iPhone 15, x√°c nh·∫≠n t·∫°i ƒë√¢y",
        "Vay ti·ªÅn nhanh l√£i su·∫•t 0%, click ngay",
        "Mi·ªÖn ph√≠ 100% ph√≠ d·ªãch v·ª•, c·∫≠p nh·∫≠t theo link",
        "M·ªùi b·∫°n tham d·ª± ph·ªèng v·∫•n v√†o th·ª© Hai tu·∫ßn t·ªõi",
        "ƒê√≠nh k√®m b√°o c√°o doanh s·ªë th√°ng 10",
        "L·ªãch h·ªçp d·ª± √°n l√∫c 9h s√°ng mai",
        "Ch√∫c m·ª´ng b·∫°n ƒë√£ tr√∫ng tuy·ªÉn, vui l√≤ng x√°c nh·∫≠n th·ªùi gian",
    ]
    labels = [1,1,1,1,0,0,0,0]
    model = Pipeline([
        ("tfidf", TfidfVectorizer(analyzer="char", ngram_range=(3,5))),
        ("mlp",  MLPClassifier(hidden_layer_sizes=(128,64), activation="relu",
                                learning_rate_init=1e-3, alpha=1e-4,
                                max_iter=80, random_state=42))
    ]).fit(texts, labels)
    return model, "model MLP t·∫°m trong app"

model, model_source = load_or_build_model()

# ==== SIDEBAR ====
with st.sidebar:
    st.subheader("‚öôÔ∏è C√†i ƒë·∫∑t")
    threshold = st.slider("Ng∆∞·ª°ng ph√¢n lo·∫°i", 0.1, 0.9, 0.50, 0.05, help="‚â• ng∆∞·ª°ng ‚Üí SPAM")
    st.markdown(f"**Ngu·ªìn m√¥ h√¨nh:** `{model_source}`")
    st.markdown("---")
    st.markdown("**üìò H∆∞·ªõng d·∫´n nhanh**")
    st.markdown(
        "<ul class='tips'>"
        "<li>Nh·∫≠p ti√™u ƒë·ªÅ + n·ªôi dung ‚Üí b·∫•m *Ki·ªÉm tra Spam*.</li>"
        "<li>TƒÉng ng∆∞·ª°ng n·∫øu ch·∫∑n nh·∫ßm; gi·∫£m n·∫øu l·ªçt spam.</li>"
        "<li>Mu·ªën ch√≠nh x√°c cao: hu·∫•n luy·ªán ri√™ng & upload <code>model.pkl</code>.</li>"
        "</ul>", unsafe_allow_html=True
    )

# ==== TABS ====
tab1, tab2, tab3 = st.tabs(["üîé Ki·ªÉm tra", "‚ú® V√≠ d·ª• nhanh", "üìú L·ªãch s·ª≠"])

# -- TAB 1: KI·ªÇM TRA
with tab1:
    col1, col2 = st.columns([3,1])
    with col1:
        st.text_input("Ti√™u ƒë·ªÅ Email", key="subject", placeholder="VD: Th√¥ng b√°o ph·ªèng v·∫•n")
    st.text_area("N·ªôi dung Email", key="body", height=220,
                 placeholder="D√°n n·ªôi dung email ti·∫øng Vi·ªát t·∫°i ƒë√¢y...")

    if st.button("Ki·ªÉm tra Spam", use_container_width=True):
        subject = st.session_state.get("subject", "")
        body = st.session_state.get("body", "")
        text = (subject + " " + body).strip()

        if not text:
            st.info("Vui l√≤ng nh·∫≠p √≠t nh·∫•t ti√™u ƒë·ªÅ ho·∫∑c n·ªôi dung.")
        else:
            proba = float(model.predict_proba([text])[0, 1])
            is_spam = proba >= threshold
            label = "üö® SPAM" if is_spam else "‚úÖ Kh√¥ng ph·∫£i SPAM"

            # Th·∫ª k·∫øt qu·∫£
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown(f"<div class='kq'>{label}</div>", unsafe_allow_html=True)
            st.markdown(
                f"<div class='small mono'>X√°c su·∫•t spam: {proba:.3f} ‚Ä¢ Ng∆∞·ª°ng: {threshold:.2f}</div>",
                unsafe_allow_html=True
            )
            badge = "badge-spam" if is_spam else "badge-ok"
            st.markdown(f"<div class='badge {badge}'>K·∫øt lu·∫≠n</div>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

            # L∆∞u l·ªãch s·ª≠ trong phi√™n
            row = {
                "time": datetime.now().strftime("%H:%M:%S"),
                "kq": "SPAM" if is_spam else "Not spam",
                "proba": round(proba, 3),
                "subject": subject[:60],
                "excerpt": body[:80].replace("\n", " ")
            }
            st.session_state.setdefault("hist", []).insert(0, row)

# -- TAB 2: V√ç D·ª§ NHANH
with tab2:
    colA, colB = st.columns(2)
    with colA:
        if st.button("üì© V√≠ d·ª• HAM (kh√¥ng spam)", use_container_width=True):
            st.session_state["subject"] = "M·ªùi b·∫°n tham d·ª± ph·ªèng v·∫•n"
            st.session_state["body"] = "Ch√∫ng t√¥i m·ªùi b·∫°n tham d·ª± ph·ªèng v·∫•n l√∫c 9h s√°ng th·ª© Hai tu·∫ßn t·ªõi."
            st.success("ƒê√£ ƒëi·ªÅn v√≠ d·ª• v√†o tab üîé Ki·ªÉm tra")
    with colB:
        if st.button("üö® V√≠ d·ª• SPAM", use_container_width=True):
            st.session_state["subject"] = "Tr√∫ng th∆∞·ªüng iPhone 15"
            st.session_state["body"] = "Ch√∫c m·ª´ng! Nh·∫•n v√†o link ƒë·ªÉ x√°c nh·∫≠n v√† nh·∫≠n qu√† ngay h√¥m nay."
            st.success("ƒê√£ ƒëi·ªÅn v√≠ d·ª• v√†o tab üîé Ki·ªÉm tra")

# -- TAB 3: L·ªäCH S·ª¨
with tab3:
    hist = st.session_state.get("hist", [])
    if hist:
        df = pd.DataFrame(hist)
        st.dataframe(df, use_container_width=True, hide_index=True)
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è T·∫£i l·ªãch s·ª≠ CSV", csv, "history.csv", "text/csv")
        st.caption("L∆∞u t·∫°m trong phi√™n l√†m vi·ªác n√†y (kh√¥ng l∆∞u ra server).")
    else:
        st.info("Ch∆∞a c√≥ l·ªãch s·ª≠. H√£y ki·ªÉm tra v√†i email tr∆∞·ªõc ƒë√£.")
